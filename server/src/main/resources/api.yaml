swagger: "2.0"
info:
  description: "Programathon 2017 API"
  version: "1.0.0"
  title: "Programathon 2017"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "programathon.swagger.io"
basePath: "/v2"
tags:
- name: "person"
  description: "Persona registrada en el padron electoral"
- name: "candidate"
  description: "Candidato electoral"
schemes:
- "http"
paths:
  /person:
    post:
      tags:
      - "person"
      summary: "Agregar nueva persona"
      description: ""
      operationId: "addPerson"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Objeto persona que va a ser agregado"
        required: true
        schema:
          $ref: "#/definitions/Person"
      responses:
        405:
          description: "Invalid input"
      security:
      - person_auth:
        - "write:pets"
        - "read:pets"
    put:
      tags:
      - "person"
      summary: "Actualizar persona"
      description: ""
      operationId: "updatePerson"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Objeto persona que necesita ser actualizado"
        required: true
        schema:
          $ref: "#/definitions/Person"
      responses:
        400:
          description: "ID invalido"
        404:
          description: "Persona no encontrada"
        405:
          description: "Excepcion de validacion"
      security:
      - person_auth:
        - "write:pets"
        - "read:pets"
  /person/{personId}:
    get:
      tags:
      - "person"
      summary: "Encontrar persona por ID"
      description: "Regresa una unica persona"
      operationId: "getPersonById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "personId"
        in: "path"
        description: "ID de la persona a retornar"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Person"
        400:
          description: "ID Invalida"
        404:
          description: "Persona no encontrada"
      security:
      - api_key: []
    post:
      tags:
      - "person"
      summary: "Actualiza una persona"
      description: ""
      operationId: "updatePersonById"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "personId"
        in: "path"
        description: "ID de persona que tiene que ser actualizada"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Nombre actualizado de persona"
        required: false
        type: "string"
      - name: "lname"
        in: "formData"
        description: "Primer apellido actualizado de persona"
        required: false
        type: "string"
      - name: "2lname"
        in: "formData"
        description: "Segundo apellido actualizado de persona"
        required: false
        type: "string"
      responses:
        405:
          description: "Invalid input"
      security:
      - person_auth:
        - "write:pets"
        - "read:pets"
    delete:
      tags:
      - "person"
      summary: "Elimina persona"
      description: ""
      operationId: "deletePerson"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "personId"
        in: "path"
        description: "ID de la persona a eliminar"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Person not found"
      security:
      - person_auth:
        - "write:pets"
        - "read:pets"
  /candidate:
    post:
      tags:
      - "candidate"
      summary: "Agregar nuevo candidato"
      description: ""
      operationId: "addCandidate"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Objeto persona que va a ser agregado"
        required: true
        schema:
          $ref: "#/definitions/Candidate"
      responses:
        405:
          description: "Invalid input"
      security:
      - person_auth:
        - "write:pets"
        - "read:pets"
    put:
      tags:
      - "candidate"
      summary: "Actualizar candidato"
      description: ""
      operationId: "updateCanbdidate"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Objeto candidato que necesita ser actualizado"
        required: true
        schema:
          $ref: "#/definitions/Candidate"
      responses:
        400:
          description: "ID invalido"
        404:
          description: "Candidato no encontrada"
        405:
          description: "Excepcion de validacion"
      security:
      - person_auth:
        - "write:pets"
        - "read:pets"
  /candidate/{candidateId}:
    get:
      tags:
      - "candidate"
      summary: "Encontrar candidato por ID"
      description: "Regresa un unico candidato"
      operationId: "getCandidateById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "candidateId"
        in: "path"
        description: "ID del candidato a retornar"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Candidate"
        400:
          description: "ID Invalida"
        404:
          description: "Candidato no encontrado"
      security:
      - api_key: []
    post:
      tags:
      - "candidate"
      summary: "Actualiza un candidato"
      description: ""
      operationId: "updateCandidateById"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "candidateId"
        in: "path"
        description: "ID de candidato que tiene que ser actualizado"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Nombre actualizado del candidato"
        required: false
        type: "string"
      - name: "lname"
        in: "formData"
        description: "Primer apellido actualizado del candidato"
        required: false
        type: "string"
      - name: "2lname"
        in: "formData"
        description: "Segundo apellido actualizado del candidato"
        required: false
        type: "string"
      responses:
        405:
          description: "Invalid input"
      security:
      - person_auth:
        - "write:pets"
        - "read:pets"
    delete:
      tags:
      - "candidate"
      summary: "Elimina candidato"
      description: ""
      operationId: "deleteCandidate"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "candidateId"
        in: "path"
        description: "ID del candidato a eliminar"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Candidate not found"
      security:
      - person_auth:
        - "write:pets"
        - "read:pets"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
securityDefinitions:
  person_auth:
    type: "oauth2"
    authorizationUrl: "http://person.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify person in your account"
      read:pets: "read your person"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Person:
    type: "object"
    required:
    - "id"
    - "name"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "Riccardo"
      lname:
        type: "string"
        example: "Bove"
      2lname:
        type: "string"
        example: "Herrera"
      candidate:
        type: "integer"
        format: "int64"
  Candidate:
    type: "object"
    required:
    - "id"
    - "name"
    - "party"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "Riccardo"
      lname:
        type: "string"
        example: "Bove"
      2lname:
        type: "string"
        example: "Herrera"
      party:
        type: "string"
        example: "PAC"
      description:
        type: "string"
        example: "PAC"
    xml:
      name: "Candidate"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"